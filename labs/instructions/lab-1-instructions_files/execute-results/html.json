{
  "hash": "a4a8723eeb1b5cb23fda0023d202b32b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 1: Introduction to Quarto\"\nauthor: \"Instructions\"\nformat: html\nnumber-sections: true\nnumber-depth: 2\neditor: source\ncode-block-background: true\nexecute:\n  echo: false\n---\n\n\n\n\n# Part One: Workflow for GitHub\n\n## Step 1: Making a Copy from GitHub Classroom\n\nFor the first few weeks of the quarter, we will use GitHub Classroom to create\nour lab repositories. GitHub Classroom is a wonderful tool, as it makes it\n**incredibly** simple to copy the contents of a repository. \n\nUse these steps to make a copy of the Lab 1 repository: [List of Steps to Copy the Lab Assignment from GitHub Classroom](https://scribehow.com/shared/Copying_the_Lab_Assignment_with_GitHub_Classroom__jKUfxzJUQjOQ2lqJy2UPoQ) \n\n## Step 2: Inspecting the Lab\n\nOnce you complete these steps, a dialogue box will open with messages about\ncloning (making a copy) of your Lab 1 repository. When the messages are\nfinished, you should have a new RStudio session open. You should notice a few\nthings:\n\n-   In the upper right corner you should see a blue R cube with \n`introdcution-to-quarto` written next to it ![](images/r-project.png){width=\"15%\" fig-alt=\"A picture of a blue cube with an R inside, next to the text 'introduction-to-quarto-allison-theobold'\"}, this tells\nyou that you are working in an R Project (we'll learn more about these next\nweek).\n-   In the \"Files\" pane, you should see a list of all the files included in the\n`lab-1` repository you copied.\n-   In the upper right pane, you should see a tab labeled \"Git\".\n-   Nothing should be displayed in this pane, since you haven't made any changes \nto the files that were copied! \n\n## Step 3: Making a Small Change\n\nNow, find the `lab-1-student.qmd` file in the \"Files\" tab in the lower right \nhand corner. Click on this file to open it. \n\nAt the top of the document (in the YAML) there is an `author` line that says \n`\"Your name here!\"`. Change this to be your name and save your file either by\nclicking on the blue floppy disk or with a shortcut (command / control + s). \n\n## Step 4: Pushing Your Lab to GitHub\n\nNow for our last step, we need to [commit the files to our repo](https://happygitwithr.com/existing-github-first#stage-and-commit). \n\n-   Click the \"Git\" tab in upper right pane\n-   Check the \"Staged\" box for the `lab-1-student.qmd` file \n-   Click \"Commit\"\n-   In the box that opens, type a message in \"Commit message\", such as\n\"Added my name\".\n-   Click \"Commit\".\n-   Click the green \"Push\" button to send your local changes to GitHub.\n\nRStudio will display something like:\n\n```         \n>>> /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -> main\n```\n\n## Step 5: Verifying Your Changes\n\nGo back to your browser. I assume you're still viewing the GitHub repo you just cloned. Refresh the page. You should see all the project files you committed there. If you click on \"commits\", you should see one with the message you used, e.g. \"Added my name\".\n\n## Step 6: Let's get started working with Quarto!\n\nNow that you've added your name, go ahead and get started with the rest of the \nlab! \n\n# Part Two: Exploring Quarto Documents\n\n## Specifying Global Execute Options\n\nExecution options specify how the R code in your Quarto document should be\ndisplayed. This [guide](https://quarto.org/docs/computations/execution-options.html)\nprovides descriptions on the options you can specify in a document's execution.\n\nTo start, your YAML should look something like this:\n\n```         \n---\ntitle: \"Lab 1: Introduction to Quarto\"\nauthor: \"Your name goes here!\"\ndate: \"Insert the date here!\"\nformat: html\nself-contained: true\neditor: source\n---\n```\n\n**Question 1** -- Add your name and the date to the YAML.\n\n**Question 2** -- Add an `execute` line to your YAML that includes the following\noptions, (1) your source code is always output on the page, and (2) your\ndocument will render even if there are errors.\n\n## Running the Provided Code\n\nNext, click on the \"Play\" button on the right of the first auto-populated code\nchunk. Alternatively, you can highlight (or simply put your cursor on the line\nof) the code you want to run and hit <kbd>ctrl</kbd> + <kbd>Enter</kbd> (for\nPCs) or <kbd>⌘</kbd> + <kbd>Enter</kbd> (for Macs).\n\nYou should see the code appear in the console, as well as the result of the code\n(`2`). Keep in mind the `[1]` before the `2` is vector notation. This means the\nresult is a *vector* of length 1, whose first element is `2`.\n\n**Question 3** -- Let's spice this code up a bit. Delete `1 + 1` from the code\nchunk and paste in the following code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load a dataset into the R Environment.\ndata(ToothGrowth)\n\n# Look at the summary of the variables in the dataset.\nsummary(ToothGrowth)\n```\n:::\n\n\n\n\nNow run this code. You should see a six-number summary of the variables `len`\nand `dose` included in the `ToothGrowth` dataset, as well as the frequency of\nthe levels contained in the `supp` variable. Further, if you inspect the\nEnvironment tab, the `ToothGrowth` dataset should appear. You can click on the\ndataset name (not the blue play button!) to look at the data.\n\n### Check the Data Documentation\n\n**Question 4** -- In your **console** (*not* in the Quarto document), type\n`?ToothGrowth` (or alternatively `help(ToothGrowth)`). Use the information that\npops up in the *Help* pane in RStudio to fill in the blanks below.\n\n*This dataset investigates the effect of \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_ on tooth growth \nin \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_.*\n\n*The two supplement delivery methods include OJ (\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_)\nand VC (\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_).*\n\n*`ToothGrowth` is a data frame with \\_\\_\\_\\_ observations and \\_\\_\\_\\_ \nvariables.*\n\n**Question 5** -- *Before* the code chunk, change the \"Running the Provided\nCode\" section header to a header that better describes the contents of this\nsection (e.g., Tooth Growth Dataset).\n\n## Creating a Plot\n\nYour second code chunk is just as boring as your first, so let's spice it up!\n\n**Question 6** -- Replace the `plot(pressure)` code with the following (we will\ntalk about graphics next week!):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(data = ToothGrowth, \n       mapping = aes(x = supp, y = len)) +\n  geom_boxplot() +\n  labs(x = \"Supplement\", y = \"Length of Teeth (mm)\")\n\nToothGrowth %>% \n  mutate(dose = as.factor(dose)) %>% \n  ggplot(mapping = aes(x = dose, y = len)) +\n  geom_boxplot() +\n  labs(x = \"Dose of Supplement (mg/day)\", y = \"Length of Teeth (mm)\")\n```\n:::\n\n\n\n\nNow, run this code chunk! You should see two side-by-side boxplots, one plot\ncomparing tooth length between the two supplement delivery methods and one plot\ncomparing tooth length between the three different dosages uses.\n\n**Question 7** -- Read over the [Quarto documentation on figure options](https://quarto.org/docs/authoring/figures.html#computations) and add an\noption (`#|`) to the above code chunk to make the figures print side-by-side\n(i.e., in one row) in the rendered HTML file.\n\n**Question 8** -- Specify in the code chunk options that these boxplots should\nbe **center aligned**.\n\n**Question 9** -- Specify a **figure caption** for the boxplots (using a\ncode-chunk option).\n\n## Inserting a New Code Chunk\n\nNavigate to the last sentence of your the Quarto document. We're now going to\ninsert a new `R` code chunk at the bottom of the document.\n\nThere are four different ways to do this:\n\n1.  Type <kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>i</kbd> (on a PC) or \n<kbd>⌘</kbd> + <kbd>⌥</kbd> + <kbd>i</kbd> (on a Mac).\n\n2.  Click on the ![](images/insert_code.png){width=\"5%\"} symbol. This should \nautomatically default to R code, but if you have a Python compiler on your \ncomputer, you might need to select \"R\" from the options.\n\n3.  If you are using the Visual editor, click on the \"Insert\" button, then \nselect \"Code Chunk\", and finally select \"R\".\n\n4.  Manually add the code chunk by typing ```` ```{r} ````. Make sure to close\nyour code chunk with ```` ``` ````.\n\n## Conducting a t-test for Two Independent Samples\n\nIn this section, we are going to conduct a two-sample independent t-test to \ncompare tooth length between the two supplement methods in the `ToothGrowth` \ndataset. I have outlined the null and alternative hypotheses we will be testing:\n\n$H_0$: The treatment mean tooth length for the OJ supplement delivery method \n**is the same** as the treatment mean tooth length for the VC supplement \ndelivery method.\n\n$H_A$: The treatment mean tooth length for the OJ supplement delivery method\n**is different** from the treatment mean tooth length for the VC supplement \ndelivery method.\n\nWhile a second course in statistics is a pre-requisite for this class, you may \nwant to go [here](https://openintro-ims.netlify.app/inference-two-means) for a \nrefresher on conducting two-sample independent t-tests.\n\nCarry out the following steps:\n\n**Question 10** -- Using the `t.test()` function, write code to carry out the\nanalysis. You can assume unequal variances and a two-sided alternative.\n\n::: callout-tip\n# Function Documentation\n\nLook up the help documentation for `t.test()` for directions on how your inputs\nshould look. Hint: specifically look at the examples at the bottom for comparing\n`extra` across groups in the `sleep` dataset.\n:::\n\n**Question 11** -- Run your code chunk to obtain the output for your statistical\ntest.\n\n**Question 12** -- Create a numbered list containing:\n\n-   Your conclusion (in the context of these data) based on the p-value.\n-   An interpretation of the confidence interval (make sure to read what \nconfidence level is used by default).\n\n**Question 13** -- Create another section header, describing the contents of\nthis section.\n\n## Render Your Document\n\nRender your document as an **html** file. Use the \"Render\" button \n(the blue arrow!) at the top of your screen.\n\nIf you run into trouble rendering your document, try restarting R and running \nyour code chunks in order, and see if you can find the problem.\n\nAnother common issue is deleting the tick marks (```` ``` ````) that surround \nyour code chunks. If you notice that the code chunks are not showing a \"Play\"\nbutton (![](images/code-play-button.png){width=\"5%\"}), or that they are not \nhighlighted in gray, double check your tick marks!\n\nRecall we included `error: true` in our YAML execution options. This means that\nyour document will still render even if there are errors. Make sure you are\ndouble checking your work!\n\nYou will notice that there is auto-generated text that is unrelated to the work\nthat you completed. It is always a good idea to delete this extra text!\n\n# Challenge 1: Styling your Quarto Document\n\nYou can find a list of every option you can use to format an HTML document [here](https://quarto.org/docs/output-formats/html-basics.html) and [here](https://quarto.org/docs/reference/cells/cells-knitr.html). Further, [here](https://quarto.org/docs/output-formats/html-themes.html) are lists of \ndifferent themes you can specify in your YAML to produce differently styled\noutputs.\n\nMake the following changes to your document:\n\n1.  Specify **\"code-folding\"** in your YAML document options.\n\n2.  Add a **table of contents** to your document.\n\n3.  Add a color theme to your document.\n\n## Render again!\n\nNotice that when you render the document, all of the code reruns again, \nproducing the same output as before, but with your changes---this is called \nreproducibility!\n\nYou should render **often** while completing your practice activities and lab\nassignments. Make small changes, then make sure the file still renders rather \nthan making a bunch of big changes and then realizing something is wrong.\n\n## Turn it in!\n\nOpen the .html file on your computer to make sure it looks as you expected. Then\nupload the rendered (.html extension) document to Canvas!\n\n> You'll be doing this same process for all your future Lab Assignments. Each of\n> these will involve a Quarto file. Some weeks, I may have a template for you to\n> copy like you had here, while other weeks you will generate your own Quarto\n> file from scratch.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}