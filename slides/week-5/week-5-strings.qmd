---
title: "Using `stringr` to Work with Strings"
format: 
  revealjs:
        theme: [simple, ../style.scss]
editor: source
---

```{r}
#| include: false
#| message: false
#| label: setup

library(tidyverse)
library(palmerpenguins)
library(liver)

data(cereal)
```

## Tuesday, February 4

Today we will...

<!-- + New layout this week  -->
<!-- + What you can expect in Week 6 -->
+ New material
  + String variables
  + Functions for working with strings
  + Regular expressions
+ [PA 5.1: Scrambled Message](../../group-activities/week-5/PA-5-strings.qmd)

# Week 5 Layout

# Week 5 Layout 

- Today: Strings with `stringr`
  + Practice Activity: Decoding a Message

. . .

- Thursday: Dates with `lubridate`
  + Practice Activity: Jewel Heist

. . .

- Lab Assignment Solving a Murder Mystery
  + Using `dplyr` + `stringr` + `ludridate`
  
<!-- # Week 6 Layout -->

<!-- # Week 6 Layout -->

<!-- - Tuesday: Writing Basic Functions -->
<!--   + Practice Activity -->

<!-- . . . -->

<!-- - Thursday: Midterm Portfolio Work Session -->
<!--   + Midterm Portfolios Due Sunday, November 3 -->

<!-- ## Comments from Week 4 -->

<!-- :::: {.columns} -->
<!-- ::: {.column width="40%"} -->

<!-- **Read** -->

<!-- --------- -->
<!-- Average -->

<!-- Total -->

<!-- Which or For Each -->

<!-- Minimum -->

<!-- Maximum -->

<!-- ::: -->
<!-- ::: {.column width="60%"} -->

<!-- **Think** -->

<!-- --------- -->

<!-- `summarize(avg = mean())` -->

<!-- `summarize(total = sum())` -->

<!-- `group_by()` -->

<!-- `slice_min()` -->

<!-- `slice_max()` -->

<!-- ::: -->
<!-- :::: -->


# String Variables

## What is a string?

A **string** is a bunch of **characters**.

. . .

There is a difference between...

<center>

...a **string** (many characters, one object)...

and

...a **character vector** (vector of strings).

</center>

. . .

```{r}
#| echo: true
#| code-line-numbers: false
#| label: strings-example

my_string <- "Hi, my name is Bond!"
my_string
```

. . .

```{r}
#| echo: true
#| code-line-numbers: false
my_vector <- c("Hi", "my", "name", "is", "Bond")
my_vector
```

## `stringr`

:::: {.columns}
::: {.column width="80%"}
**Common tasks**

+ Identify strings containing a particular pattern.
+ Remove or replace a pattern.
+ Edit a string (e.g., make it lowercase).

:::
::: {.column width="20%"}

```{r}
#| fig-align: center
#| fig-alt: ""
knitr::include_graphics("https://github.com/rstudio/hex-stickers/blob/main/PNG/stringr.png?raw=true")
```
:::
::::

::: callout-note 
+ The `stringr` package loads with `tidyverse`.
+ All functions are  of the form `str_xxx()`.
:::


## `pattern = `

The `pattern` **argument** appears in many `stringr` functions.

+ The pattern **must** be supplied inside quotes.

::: {.small}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_detect(my_vector, pattern = "Bond")
str_locate(my_vector, pattern = "James Bond")
str_match(my_vector, pattern = "[bB]ond")
str_extract(my_vector, pattern = "[jJ]ames [bB]ond")

```
:::

<br>

. . .

Let's explore these functions!


## `str_detect()`

Returns a **logical vector** indicating whether the pattern was found in each element of the supplied vector.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")
str_detect(my_vector, pattern = "Bond")
```
:::

. . .

::: {.small}
+ Pairs well with `filter()`.
+ Works with `summarise()` + `sum` (to get total matches) or `mean` (to get proportion of matches).
:::

. . .

::: {.small}
::: {.callout-note collapse="true"}
## Related Function

`str_which()` returns the indexes of the strings that contain a match.
:::
:::

## `str_match()` 

Returns a **character matrix** containing either `NA` or the pattern, depending on if the pattern was found.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false
my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_match(my_vector, pattern = "Bond")
```
:::

<!-- . . . -->

<!-- The matrix will have more columns if you use regex groups. -->

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- my_vector <- c("Hello,", "my name is", "Bond", "James Bond") -->
<!-- str_match(my_vector, pattern = "(.)o(.)") -->
<!-- ``` -->


## `str_extract()` 

Returns a **character vector** with either `NA` or the pattern, depending on if the pattern was found.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_extract(my_vector, pattern = "Bond")
```
:::

. . .

::: callout-warning

`str_extract()` only returns the **first** pattern match.

Use `str_extract_all()` to return **every** pattern match.

:::

## What do you mean by the *first* match?

Suppose we had a slightly different vector...

```{r}
#| echo: true
#| code-line-numbers: false

alt_vector <- c("Hello,", 
               "my name is", 
               "Bond, James Bond")
```

. . .

If we were to extract ***every*** instance of `"Bond"` from the vector...

::: columns
::: {.column width="45%"}
::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

str_extract(alt_vector, 
            pattern = "Bond")
```
:::
:::

::: {.column width="3%"}
:::

::: {.column width="52%"}
::: {.fragment}
::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

str_extract_all(alt_vector, 
                pattern = "Bond")
```
:::
:::
:::
:::


## `str_locate()` 

Returns a **dateframe** with two **numeric variables** -- the starting and ending location of the pattern. The values are `NA` if the pattern is not found.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_locate(my_vector, pattern = "Bond")
```
:::

. . .

::: {.small}
::: callout-note
## Related Function

`str_sub()` extracts values based on a starting and ending location.
:::
:::

## `str_subset()`

Returns a **character vector** containing a subset of the original **character vector** consisting of the elements where the pattern was found.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_subset(my_vector, pattern = "Bond")
```
:::

## Try it out!

::: {.small}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

my_vector <- c("I scream,", 
               "you scream", 
               "we all",
               "scream",
               "for",
               "ice cream")

str_detect(my_vector, pattern = "cream")
str_locate(my_vector, pattern = "cream")
str_match(my_vector, pattern = "cream")
str_extract(my_vector, pattern = "cream")
str_subset(my_vector, pattern = "cream")
```

::: callout-note
For each of these functions, write down:

+ the **object structure** of the output.
+ the **data type** of the output.
+ a brief explanation of what they do.
::::
:::

## Replace / Remove Patterns

::: panel-tabset

### `str_replace()`

::: {.small}
Replace the **first** matched pattern in each string.

+ Pairs well with `mutate()`.

```{r}
#| echo: true
#| code-line-numbers: false

str_replace(my_vector, 
            pattern = "Bond", 
            replace = "Franco")
```
:::

</br> 

::: {.small}
::: {.callout-note collapse="true"}
## Related Function

`str_replace_all()` replaces **all** matched patterns in each string.
:::
:::

### `str_remove()`

::: {.small}
Remove the **first** matched pattern in each string.

```{r}
#| echo: true
#| code-line-numbers: false

str_remove(my_vector, 
           pattern = "Bond")
```
:::

</br>

::: {.small}
::: {.callout-note collapse="true"}
## Related Functions

This is a special case of  `str_replace(x, pattern, replacement = "")`.

`str_remove_all()` removes **all** matched patterns in each string.
:::
:::
:::


## Edit Strings

Convert letters in a string to a specific capitalization format.

::: panel-tabset

### lower

`str_to_lower()` converts all letters in a string to lowercase.

<br>

```{r}
#| echo: true
#| code-line-numbers: false

str_to_lower(my_vector)
```

### UPPER

`str_to_upper()` converts all letters in a string to uppercase.

<br>

```{r}
#| echo: true
#| code-line-numbers: false

str_to_upper(my_vector)
```

### Title

`str_to_title()` converts the first letter of each word to uppercase.

<br>

```{r}
#| echo: true
#| code-line-numbers: false

str_to_title(my_vector)
```

::: {.callout-tip}
# This is handy for axis labels!
:::
:::


## Combine Strings

::: panel-tabset
### `str_c()`

Join multiple strings into a single character vector.

```{r}
#| echo: true
#| code-line-numbers: false

prompt <- "Hello, my name is"
first  <- "James"
last   <- "Bond"
str_c(prompt, last, ",", first, last, sep = " ")
```

::: callout-note
Similar to `paste()` and `paste0()`.
:::

### `str_flatten()`

Combine a vector of strings into a single string.

```{r}
#| echo: true
#| code-line-numbers: false

my_vector <- c("Hello,", 
               "my name is", 
               "Bond", 
               "James Bond")

str_flatten(my_vector, collapse = " ")
```

### `str_glue()`

Use variables in the environment to create a string based on {expressions}.

```{r}
#| echo: true
#| code-line-numbers: false

first <- "James"
last <- "Bond"
str_glue("My name is {last}, {first} {last}")
```

::: callout-tip
For more details, I would recommend looking up the [`glue` R package](https://glue.tidyverse.org/)!
:::
:::

## Tips for String Success

+ Refer to the [`stringr` cheatsheet](https://posit.co/wp-content/uploads/2022/10/strings-1.pdf)

+ Remember that `str_xxx` functions need the first argument to be a **vector of strings**, not a **dataset**!
  + You will use these functions *inside* `dplyr` verbs like `filter()` or `mutate()`.

```{r}
#| echo: true
#| code-line-numbers: "2"
#| eval: false
cereal |> 
  mutate(is_bran = str_detect(name, "Bran"), 
         .after = name)
```


```{r}
#| eval: true
#| echo: false

cereal |> 
  mutate(is_bran = str_detect(name, "Bran"), 
         .after = name) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## Tips for String Success

The real power of these `str_xxx` functions comes when you specify the `pattern` using **regular expressions**!

```{r}
#| fig-align: center
#| out-width: 70%
#| fig-alt: "The image is a comic strip from xkcd titled 'Regular Expressions.' It humorously portrays a programmer's overconfidence in using regular expressions to solve complex text processing tasks. In the first panel, a stick figure declares, 'EVERYBODY STAND BACK,' and in the second panel, they assert, 'I KNOW REGULAR EXPRESSIONS,' suggesting that their expertise is both a warning and a badge of honor. This reflects the sentiment that while regular expressions are powerful tools in programming, they can also lead to intricate and hard-to-maintain code if not used judiciously."

knitr::include_graphics("images/regular_expressions.png")
```


# regex

## Regular Expressions

> "Regexps are a very terse language that allow you to describe patterns in strings."
>
> *R for Data Science*

. . .

Use `str_xxx` functions + **regular expressions**!

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2"
str_detect(string  = my_string_vector,
           pattern = "p[ei]ck[a-z]")
```

. . .

::: callout-tip
You might encounter `gsub()`, `grep()`, etc. from Base R, but I would highly recommending using functions from the `stringr` package instead.
:::

## Regular Expressions

**...are tricky!**

+ There are lots of new symbols to keep straight.
+ There are a lot of cases to think through.

<br>

This [web app](https://spannbaueradam.shinyapps.io/r_regex_tester/) for testing R regular expressions might be handy!


## Special Characters

There is a set of characters that have a specific meaning when using regex.

+ The `stringr` package **does not** read these as normal characters.
+ These characters are:

<center>

`.` `^`  `$` `\`  `|` `*` `+` `?` `{` `}` `[` `]` `(` `)`

</center>


## Wild Card Character: `.`

This character can match **any** character.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("She", 
       "sells", 
       "seashells", 
       "by", 
       "the", 
       "seashore!")

str_subset(x, pattern = ".ells")
```

<br>

This matches strings that contain any character followed by "ells".


## Anchor Characters: `^ $`

::: columns
::: {.column width="48%"}
::: {.small}
`^` -- looks at the beginning of a string.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("She", 
       "sells", 
       "seashells", 
       "by", 
       "the", 
       "seashore!")

str_subset(x, pattern = "^s")
```

This matches strings that start with "s".
:::

:::

::: {.column width="2%"}
:::

::: {.column width="50%"}
::: {.fragment}
::: {.small}
`$` -- looks at the end of a string.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("She", 
       "sells", 
       "seashells", 
       "by", 
       "the", 
       "seashore!")

str_subset(x, pattern = "s$")
```

This matches strings that end with "s".
:::

:::
:::
:::


## Quantifier Characters: `? + *`

::: {.small}
`?`  -- matches when the preceding character occurs 0 or 1 times in a row.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("shes", 
       "shels", 
       "shells", 
       "shellls", 
       "shelllls")

str_subset(x, pattern = "shel?s")
```
:::

. . .

::: {.small}
`+` -- occurs 1 or more times in a row.

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "shel+s")
```
:::

. . .

::: {.small}
`*` -- occurs 0 or more times in a row.

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "shel*s")
```
:::

## Quantifier Characters: `{}`

::: {.small}
`{n}` -- matches when the preceding character occurs exactly n times in a row.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("shes", 
       "shels", 
       "shells", 
       "shellls", 
       "shelllls")

str_subset(x, pattern = "shel{2}s")
```
:::

. . .

::: {.small}
`{n,}` -- occurs at least n times in a row.

```{r}
#| echo: true
str_subset(x, pattern = "shel{2,}s")
```
:::

. . .

::: {.small}
`{n,m}` -- occurs between n and m times in a row.

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "shel{1,3}s")
```
:::

## Character Groups: `()`

::: {.small}
Groups are created with `( )`.

+ We can specify "either" / "or" within a group using `|`.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("Peter", 
       "Piper", 
       "picked", 
       "a", 
       "peck",
       "of", 
       "pickled",
       "peppers!")

str_subset(x, pattern = "p(e|i)ck")
```
:::

<br>

::: {.small}
This matches strings that contain **either** "peck"
 **or** "pick".
:::

## Character Classes: `[]`

::: {.small}
Character classes let you specify multiple possible characters to match on.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("Peter", 
       "Piper", 
       "picked", 
       "a",
       "peck",
       "of",
       "pickled",
       "peppers!")

str_subset(x, pattern = "p[ei]ck")
```
:::

. . .

::: {.callout-tip}
# Why use `[]` instead of `()`?

`()` is better for making *groups* of characters, plus you can only use a `|` with `()`.  

`[]` is better for referencing multiple characters, plus you can only use a `^` with `[]`...
:::

## Matches you don't want

`[^ ]`  -- specifies characters **not** to match on (think **except**)

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "p[^i]ck")
```

. . .

</br>

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "^p")
```

. . .

</br> 

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "^[^p]")
```


## Character Classes: `[]`

::: {.small}
`[ - ]`  -- specifies a range of characters.

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("Peter", 
       "Piper", 
       "picked", 
       "a",
       "peck",
       "of",
       "pickled",
       "peppers!")

str_subset(x, pattern = "p[ei]ck[a-z]")
```
:::

. . .

::: {.small}
+ [A-Z] matches any capital letter.
+ [a-z] matches any lowercase letter.
+ [A-z] or [:alpha:] matches any letter
+ [0-9] or [:digit:] matches any number
:::

## Shortcuts

::: {.small}
- `\\w` -- matches any **"word"**  (`\\W` matches **not** "word") 

  + A "word" contains any letters and numbers.

- `\\d` -- matches any **digit** (`\\D` matches **not** digit) 

- `\\s` -- matches any **whitespace** (`\\S` matches **not** whitespace) 

  + Whitespace includes spaces, tabs, newlines, etc.
:::

. . .

</br> 

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

x <- "phone number: 1234567899"

str_extract(x, pattern = "\\d+")
str_extract_all(x, pattern = "\\S+")
```
:::

## Try it out!

What regular expressions would match words that...

::: columns
::: {.column width="40%"}
+ end with a vowel?
+ start with x, y, or z?
+ *do not* contain x, y, or z?
+ contain [British spelling](https://www.oxfordinternationalenglish.com/differences-in-british-and-american-spelling/)?
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
```{r}
#| echo: true
#| code-line-numbers: false

x <- c("zebra", 
       "xray", 
       "apple", 
       "yellow",
       "color", 
       "colour",
       "summarize",
       "summarise")
```
:::
:::

## Some Possible Solutions...

+ end with a vowel?

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

str_subset(x, "[aeiouy]$")
```

+ start with x, y, or z?

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

str_subset(x, "^[xyz]")
```

+ *do not* contain x, y, or z?

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

str_subset(x, "[^xyz]")
```

+ contain [British spelling](https://www.oxfordinternationalenglish.com/differences-in-british-and-american-spelling/)?

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

str_subset(x, "(our)|(i[sz]e)")
```


## Escape: `\\`

::: {.small}
To match a *special character*, you need to **escape** it.

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false

x <- c("How",
       "much", 
       "wood",
       "could",
       "a",
       "woodchuck",
       "chuck",
       "if",
       "a",
       "woodchuck",
       "could",
       "chuck",
       "wood?")

str_subset(x, pattern = "?")
```
:::

## Escape: `\\`

Use `\\` to escape the `?` -- it is now read as a normal character.

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: false

str_subset(x, pattern = "\\?")
```

. . .

</br>

::: callout-note
Alternatively, you could use `[]`:

```{r}
#| echo: true
#| code-line-numbers: false

str_subset(x, pattern = "[?]")
```
:::

## When in Doubt

<br>

```{r}
#| fig-align: center
#| out-width: 80%
knitr::include_graphics("images/backslashes.png")
```

Use the [web app](https://spannbaueradam.shinyapps.io/r_regex_tester/) to test R regular expressions.

## Tips for working with regex

+ Read the regular expressions out loud like a request.

. . .

+ Test out your expressions on small examples first.

::: {.callout-note collapse="true"}  
### `str_view()`
```{r}
#| echo: true
#| code-line-numbers: false

str_view(c("shes", "shels", "shells", "shellls", "shelllls"), "l+")
```
:::

. . .

+ Use the `stringr` [cheatsheet](https://posit.co/wp-content/uploads/2022/10/strings-1.pdf).

. . .

+ Be kind to yourself! 


<!-- # Strings in the `tidyverse` -->

<!-- ## `stringr` functions + `dplyr` verbs! -->


<!-- ```{r} -->
<!-- #| include: false -->
<!-- library(readxl) -->
<!-- military <- read_xlsx(here::here("group-activities",  -->
<!--                                  "week-4",  -->
<!--                                  "data", -->
<!--                                  "gov_spending_per_capita.xlsx"), -->
<!--                       sheet = "Share of Govt. spending",  -->
<!--                       skip  = 7,  -->
<!--                       n_max  = 191) -->
<!-- ``` -->

<!-- Country names with a (capital or lowercase) "Z"? -->

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- #| eval: false -->
<!-- #| code-line-numbers: "2" -->
<!-- military |>  -->
<!--   filter(str_detect(Country, "[Zz]")) |>  -->
<!--   distinct(Country) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| eval: true -->
<!-- #| echo: false -->
<!-- military |>  -->
<!--   filter(str_detect(Country, "[Zz]")) |>  -->
<!--   distinct(Country) |>  -->
<!--   knitr::kable() |>  -->
<!--   kableExtra::scroll_box(height = "125px") |>  -->
<!--   kableExtra::kable_styling(font_size = 25) -->
<!-- ``` -->

<!-- . . . -->

<!-- The proportion of country names with a compass direction? -->

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- #| code-line-numbers: "3-4" -->
<!-- military |>  -->
<!--   distinct(Country) |>  -->
<!--   summarize(prop = mean(str_detect(Country, -->
<!--                                    pattern = "[Nn]orth|[Ss]outh|[Ee]ast|[Ww]est"))) -->
<!-- ``` -->


<!-- ## `matches(pattern)` -->

<!-- Select all variables with a name that matches the supplied pattern. -->

<!-- + Pairs well with `select()`, `rename_with()`, and `across()`. -->

<!-- ::: panel-tabset -->

<!-- ### Before -->
<!-- ```{r} -->
<!-- #| echo: true -->
<!-- military_clean <- military |>  -->
<!--   mutate(across(`1988`:`2019`,  -->
<!--                 ~ na_if(.x, y = ". .")), -->
<!--          across(`1988`:`2019`,  -->
<!--                 ~ na_if(.x, y = "xxx"))) -->
<!-- ``` -->

<!-- ### With regex -->
<!-- ```{r} -->
<!-- #| echo: true -->
<!-- military_clean <- military |>  -->
<!--   mutate(across(matches("[1-9]{4}"),  -->
<!--                 ~ na_if(.x, y = ". .")), -->
<!--          across(matches("[1-9]{4}"),  -->
<!--                 ~ na_if(.x, y = "xxx"))) -->
<!-- ``` -->

<!-- ::: -->

<!-- ## Messy Covid Variants! -->

<!-- ![](images/covid-data-snip.JPG) -->

<!-- What is that variable?! -->

<!-- <font size = 4> -->

<!-- `[{'variant': 'Other', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 4.59}, {'variant': 'V-20DEC-01 (Alpha)', 'cumWeeklySequenced': 0.0, 'newWeeklyPercentage': 0.0}, {'variant': 'V-21APR-02 (Delta B.1.617.2)', 'cumWeeklySequenced': 0.0, 'newWeeklyPercentage': 0.0}, {'variant': 'V-21OCT-01 (Delta AY 4.2)', 'cumWeeklySequenced': 0.0, 'newWeeklyPercentage': 0.0}, {'variant': 'V-22DEC-01 (Omicron CH.1.1)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 24.56}, {'variant': 'V-22JUL-01 (Omicron BA.2.75)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 8.93}, {'variant': 'V-22OCT-01 (Omicron BQ.1)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 49.57}, {'variant': 'VOC-21NOV-01 (Omicron BA.1)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 0.02}, {'variant': 'VOC-22APR-03 (Omicron BA.4)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 0.08}, {'variant': 'VOC-22APR-04 (Omicron BA.5)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 5.59}, {'variant': 'VOC-22JAN-01 (Omicron BA.2)', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 1.41}, {'variant': 'unclassified_variant', 'cumWeeklySequenced': 2366843.0, 'newWeeklyPercentage': 5.26}]` -->

<!-- </font> -->

# [PA 5.1: Scrambled Message](../../group-activities/week-5/PA-5-strings.qmd)

::: columns
::: {.column width="40%"}
In this activity, you will use functions from the `stringr` package and regex to decode a message.
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
![](images/scrabble-tiles.jpg){fig-alt="A pile of tiles from the game of Scrabble."}
:::
:::

## This activity will require knowledge of:

::: columns
::: {.column width="60%"}
::: {.small}
- indexing vectors
- `stringr` functions for previewing string contents
- regular expressions for locating patterns
- `stringr` functions for removing whitespace
- `stringr` functions for truncating strings 
- `stringr` functions for replacing patterns
- `stringr` functions for combining multiple strings 
:::
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
[**None of us have all these abilities. Each of us has some of these abilities.**]{.midi}

:::
:::

## A Refresher on [Indexing Vectors](https://earobinson95.github.io/stat331-calpoly-text/00-prereading.html#indexing-by-location) with `[]`

```{r}
#| echo: true
#| code-line-numbers: false

x <- c("She",
       "sells",
       "seashells",
       "by", 
       "the",
       "seashore!")
```

:::: {.columns}
::: {.column width="50%"}
::: {.fragment}
+ Grab elements out of a vector with indices.

```{r}
#| echo: true
#| code-line-numbers: false

x[c(1, 4, 5)]
```
:::
:::
::: {.column width="50%"}
::: {.fragment}
+ Grab elements out of a vector with logicals.

```{r}
#| echo: true
#| code-line-numbers: false

x[c(TRUE, FALSE, FALSE, TRUE, TRUE, FALSE)]
```
:::
:::
::::

## Translating into `stringr`

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

x <- c("She",
       "sells",
       "seashells",
       "by", 
       "the",
       "seashore!")
```
:::

::: columns
::: {.column width="45%"}
::: {.small}
Detect what strings have a certain pattern:

```{r}
#| echo: true
#| code-line-numbers: false

x[
  str_detect(x, 
             pattern = "ll")
  ]
```
:::
:::

::: {.column width="3%"}
:::

::: {.column width="52%"}
::: {.fragment}
::: {.small}
Replace that pattern with a different pattern:

```{r}
#| echo: true
#| code-line-numbers: false

x <- str_replace_all(x, 
                     pattern = "ll", 
                     replacement = "zz")
x
```
:::
:::
:::
:::

## stringr Resources

::: columns
::: {.column width="60%"}
Every group should have a **stringr** cheatsheet!

::: {.small}
**On the Front**: 

- Detecting matches (e.g., Does a string have a specific pattern?)
- Subsetting strings (e.g., Extract strings with specific patterns!)
- Managing lengths (e.g., How long are the strings? Removing whitespace!)
- Mutating strings (e.g., Replace specific patterns!)
- Join & Flatten (e.g., Collapsing multiple strings into a single string!)
:::
:::

::: {.column width="5%"}
:::

::: {.column width="35%"}
![](images/stringr-cheatsheet.png){fig-alt=""}

:::
:::

<!-- ## Task Card -->

<!-- Every group should have a **task card**!  -->

<!-- . . . -->

<!-- ::: columns -->
<!-- ::: {.column width="40%"} -->
<!-- **On the Front** -->

<!-- - the expectations of each role -->
<!-- - the norms of collaborating -->
<!-- ::: -->

<!-- ::: {.column width="5%"} -->
<!-- ::: -->

<!-- ::: {.column width="55%"} -->
<!-- ::: {.fragment} -->
<!-- **On the Back** -->

<!-- ::: {.small} -->
<!-- - `stringr` functions for different tasks you may encounter -->
<!-- - Regular expressions for different tasks you may encounter -->
<!--   + Matching patterns (e.g., `[:punct:]`, `\\w`) -->
<!--   + Special characters (e.g., `^`, `$`) -->
<!--   + Creating groups of characters (e.g., `[Kk]`) -->
<!--   + Repeated patters (e.g., `?`, `+`, `{2}`) -->
<!-- ::: -->
<!-- ::: -->
<!-- ::: -->
<!-- ::: -->

## Pair Programming Expectations

::: columns
::: {.column width="49%"}
**Developer**

::: {.small}
-   Reads prompt and ensures Coder understands what is being asked. 
-   Types the code specified by the Coder into the Quarto document.
-   Runs the code provided by the Coder. 
-   Works with Coder to debug the code. 
-   Evaluates the output.  
-   Works with Coder to write code comments. 
:::
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
::: {.fragment}
**Coder**

::: {.small}
-   Reads out instructions or prompts
-   Directs the Developer what to type. 
-   Talks with Developer about their ideas. 
-   Manages resources (e.g., cheatsheets, textbook, slides). 
-   Works with Developer to debug the code. 
-   Works with Developer to write code comments. 
:::
:::
:::
:::

## Getting Started

::: {.small}
First, both of you will do the following:

<!-- - Join your Practice Activity workspace in Posit Cloud -->
<!-- - Log-in to Posit Cloud -->
<!-- - Open the PA 5: Decode Secret Message project -->
- Open the `PA-5-stringr.qmd` file
:::

. . .

::: {.small}
Then, the partner who has the most pets starts as the Developer (typing
and listening to instructions from the Coder)!

- The Coder **does not type**. 
  * The collaborative editing feature should allow you to track what is being 
  typed. 
- The Developer **only types what they are told to type**. 
:::

## External Resources

During the Practice Activity, you **are not** permitted to use Google, ChatGPT, or websites for regular expressions for help. 
. . .

</br> 

You **are** permitted to use:

- the `stringr` cheatsheet, 
- the task card, 
- the course textbook, and
- the course slides. 

## Submission

> Submit the name of the movie the quote is from. 

- Each person will input the full name of the movie the scrambled message is from into the PA5 quiz. 
- Each person will submit the `PA-5.html`.

## To do...

+ **PA 5.1: Scrambled Message**
  + Due Thursday, February 6 at 12:00pm
+ Check-in 5.2: Functions from `lubridate`
  + Due Thursday, February 6 at 12:00pm
