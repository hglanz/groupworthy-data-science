---
title: "Data Wrangling with dplyr"
format: 
  revealjs:
        theme: [simple, ../style.scss]
editor: source
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(palmerpenguins)
```

## Thursday, January 23

Today we will...

+ New Material
  + Introduce the `dplyr` package.
  + Use `dplyr` verbs to manipulate data.
+ [PA 3: Identify the Mystery College](../../group-activities/week-3/PA3-dplyr.qmd)

# Data Wrangling with `dplyr`

![Artwork by Allison Horst](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/main/rstats-artwork/data_cowboy.png){fig-alt="A cartoon illustration of a cowboy riding a dataset, symbolized by a saddle on top of a spreadsheet. The cowboy is wearing a hat and bandana, with the reins in one hand and a lasso in the other, as if wrangling data. The dataset underneath has rows and columns, representing organized data. The image humorously conveys the idea of managing and working with data."}

## `dplyr`

`dplyr` is part of the **tidyverse** that provides us with the *Grammar of Data Wrangling*.

+ This package gives us the tools to **wrangle and tidy** our data with ease.
+ Check out the `dplyr` [cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf).

```{r}
#| echo: false
#| fig-align: center
#| fig-alt: "A hexagonal-shaped logo featuring three colorful pliers in red, blue, and orange shades, aligned diagonally. The word 'dplyr' is written at the top in gray, and the bottom right corner shows the URL 'dplyr.tidyverse.org'. The background consists of diagonal black and gray stripes with colorful hexagons scattered around, symbolizing data manipulation and transformation tools, representing the dplyr package from the tidyverse ecosystem in R."
knitr::include_graphics("images/dplyr.png")

```

## `dplyr` verbs

::: {.small}
+ `filter()` -- **select rows** based on their values
+ `select()` -- **select columns**
+ `mutate()` -- **add new columns** or **change existing columns**
+ `summarize()` -- perform **summary operations** on columns
+ `group_by()` -- facilitate **group-wise operations**
+ `arrange()` -- **sort rows** based on their values
:::

. . .

::: {.small}
Use the **pipe operator** (`|>` or `%>%`) to chain together data wrangling operations.
:::

# The Pipe Operator

>No matter how complex and polished the individual operations are, it is often
> the quality of the glue that most directly determines the power of the system.
>
>— Hal Abelson

## The Pipe Operator

+ With `dplyr`, your code should read **like a sentence**.

+ The **data** is the primary object in your sentence, so it should **come first in your code**.

```{r}
#| out-width: "30%"
#| fig-align: center
knitr::include_graphics("images/diagram_sentence.jpg")
```

+ The **pipe operator** is an important part of that readability.


## The Pipe Operator

+ The pipe specifies a sequence of operations.
  * The output from one operation is passed into the first argument 
  (the dataset) of the next operation.

. . .

+ The "original" pipe: `%>%`

  + Loaded with `tidyverse` package (part of `magrittr`).

+ The "native" pipe: `|>`

  + Created in `R` version 4.1.0.
  + [Directions for how to use](https://scribehow.com/shared/Setting_Up_the_Native_Pipe_in_R__ZMEdb0tKRtil46l2S6SeIA)


## The Pipe Operator

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

dr_theobold |>
  play_a_sport()
```

. . .

<br>

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false

dr_theobold |>
  put_on("cleats") |>
  play_a_sport(type = "track")
```



## Data Comes First!

<font size = "6">

+ `filter(.data = cereal, ...)`
+ `select(.data = cereal, ...)`
+ `mutate(.data = cereal, ...)`

</font>

. . .

You can choose whether to: 

:::: {.columns}
::: {.column width="45%"}

declare your data using the `.data` argument 
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: not-piped-data

summarize(.data = cereal)
```

:::

::: {.column width="10%"}
***or***
:::

::: {.column width="45%"}
::: {.fragment}
pipe your data into the first argument of the function
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: pipe-data

cereal |> 
  summarize()
```
:::
:::
::::

## I ❤️ |>

</br> 

**The pipe operator is your friend!**

You can pipe data or summaries directly into your `ggplot2` code for plotting!

</br>

```{r}
#| label: pipe-into-ggplot
#| code-line-numbers: false
#| eval: false
#| echo: true

cereals |>
  mutate(type = as.factor(type)) |> 
  rename(temp = type) |>  
  filter(temp == "C") |>
  ggplot(mapping = aes(x = calories)) +
    geom_histogram(binwidth = 17)
```

## Example Data set --  [Cereal](https://search.r-project.org/CRAN/refmans/liver/html/cereal.html)

```{r}
#| echo: true
#| label: load-cereal-data
#| code-line-numbers: false

library(liver)
data(cereal)
```

. . .

::: panel-tabset

### Data Structure

::: {.small}
```{r}
#| echo: true
#| label: cereal-glimpse

glimpse(cereal)
```
:::

### Data Summary

::: {.small}
```{r}
#| echo: true
#| label: cereal-summary

summary(cereal)
```
:::

:::

# `filter()`

```{r}
#| fig-align: center
#| fig-cap: "Artwork by Allison Horst"
#| fig-alt: "A cartoon illustration of two characters holding a large, red sieve, filtering out hexagonal shapes from a mix of data. The characters appear focused as they perform this task, representing the concept of filtering data in the 'dplyr' package of R. The hexagons that pass through the sieve are the relevant, filtered data, while others are left behind. The image creatively portrays the function of the 'filter()' tool used in data manipulation."

knitr::include_graphics("https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_filter.jpg")
```

## `filter()`

We **filter** to the rows (observations) we would like to **keep** in the data.

. . .

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: filter-cereal

cereal |> 
  filter(sugars < 5)
```
 
</br>

```{r}
#| echo: false
#| eval: true
#| label: filter-cereal-table

cereal |> 
  filter(sugars < 5) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 25)
```


## `filter()`

We can add **multiple filters** to our data, to get a more specific subset.

```{r}
#| echo: true
#| eval: false
#| label: multiple-filters-code
#| code-line-numbers: false

cereal |> 
  filter(sugars < 5,
         type == "hot")
```

</br>

```{r}
#| echo: false
#| eval: true
#| label: multiple-filters-table

cereal |> 
  filter(sugars < 5,
         type == "hot") |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "350px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## Why not use `&`?

The `,` separating these two conditions is equivalent to using an `&`. Why not
just use a `&`? 

. . .

Well, with a lot of `&`s your code can get hard to
read...

```{r}
#| label: lots-of-ands
#| eval: false
#| echo: true
#| code-line-numbers: false

filter(sugars < 5 & type == "cold" & calories > 100)
```

. . .

</br>


So instead we use commas.

```{r}
#| label: lots-of-commas
#| eval: false
#| echo: true
#| code-line-numbers: false

filter(sugars < 5, 
       type == "cold", 
       calories > 100)
```

## `filter()`: Handy Helpers!

+ `>` : greater than
+ `<` : less than
+ `>=` or `<=`: greater than / less than or equal to
+ `==` : equal to
+ `!` : not
+ `%in%` : checks if an element belongs to a vector
+ `is.na()` : binary evaluation of missing values
+ `|` : or

## `filter()`: `|`

What if I wanted **either** non-sugary cereals **or** hot cereals...

. . .

```{r}
#| echo: true
#| eval: false
#| label: filter-or
#| code-line-numbers: false

cereal |> 
  filter(sugars < 5 |
           type == "hot")
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  filter(sugars < 5 | 
         type == "hot") |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## `filter()`: `%in%`

Are you interested in observations with values in a list of levels?

. . .

```{r}
#| echo: true
#| eval: false
#| label: filter-in-code
#| code-line-numbers: false

cereal |> 
  filter(name %in% c("Cheerios", 
                     "Cinnamon Toast Crunch", 
                     "Raisin Bran", 
                     "Cracklin' Oat Bran")
         )
```

```{r}
#| echo: false
#| eval: true
#| label: filter-in-table

cereal |> 
  filter(name %in% c("Cheerios", 
                     "Cinnamon Toast Crunch", 
                     "Raisin Bran", 
                     "Cracklin' Oat Bran")
         ) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 20)
```


## `filter()`: Related Functions

These functions select rows by **row number**.

+ `slice()` -- select rows with the specified indices
+ `slice_head()` -- select the first `n` rows
+ `slice_tail()` -- select the last `n` rows
+ `slice_sample()` -- randomly select `n` rows

## How do we "filter" in base `R`?

::: {.small}
You can use the `subset()` function!

```{r}
#| echo: true
#| eval: false
#| label: subset-for-filtering-in
#| code-line-numbers: false

cereal |> 
  subset(name %in% c("Cheerios", 
                     "Cinnamon Toast Crunch", 
                     "Raisin Bran", 
                     "Cracklin' Oat Bran")
         )
```

```{r}
#| echo: false
#| eval: true

subset(cereal, name %in% c("Cheerios", "Cinnamon Toast Crunch", "Raisin Bran", "Cracklin' Oat Bran")) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```
:::

## Another example of the `subset()` function...

```{r}
#| echo: true
#| eval: false
#| label: subset-for-filtering-and
#| code-line-numbers: false

cereal |> 
  subset(sugars < 5 & type == "hot")
```

```{r}
#| echo: false
#| eval: true
subset(cereal, sugars < 5 & type == "hot") |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```


# `arrange()`

## `arrange()`

We **arrange** the rows of the data in order of a particular variable.

. . .

<br> 

```{r}
#| echo: true
#| eval: false
#| label: arrange-code
#| code-line-numbers: false

cereal |> 
  arrange(sodium)
```

</br>

```{r}
#| echo: false
#| eval: true
#| label: arrange-table
#| code-line-numbers: false

cereal |> 
  arrange(sodium) |>
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## `arrange()`

We can arrange by **multiple** variables.

. . .

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2"
#| label: arrange-multiple-code

cereal |> 
  arrange(sodium, sugars) |>
  select(name, manuf, type, sodium, sugars)
```
 
</br>

```{r}
#| echo: false
#| eval: true
#| label: arrange-multiple-table
cereal |> 
  arrange(sodium, sugars) |>
  select(name, manuf, type, sodium, sugars) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "350px") |> 
  kableExtra::kable_styling(font_size = 25)
```


## `arrange()`: Descending Order

Default is ascending order...

...but can add `desc()` to get descending order! 

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: arrange-desc-code

cereal |> 
  arrange(desc(sodium))
```

</br> 

```{r}
#| echo: false
#| eval: true
#| label: arrange-desc-table

cereal |> 
  arrange(desc(sodium)) |>
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```


## `arrange()`: Related Functions

These functions implicitly arrange the data before slicing it (selecting rows).

+ `slice_min()` -- select rows with the lowest value(s) of a variable
+ `slice_max()` -- select rows with the highest value(s) of a variable


## `slice_max()`

Selects the `n` rows with the maximum values of the specified variable.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
#| label: slice-max-code

cereal |> 
  slice_max(order_by = sugars, n = 3)
```

```{r}
#| echo: false
#| eval: true
#| label: slice-max-table

cereal |> 
  slice_max(order_by = sugars, n = 3) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 25)
```

. . .

::: {.small}
::: {.callout-tip}
# Not interested in ties?

You can use the `with_ties = FALSE` argument to remove ties from your 
output!
:::
:::

## How do we "arrange" in base `R`?


You can use the `order()` function!

</br>

```{r}
#| echo: true
#| eval: false
#| label: arrange-complex-base-r-code
#| code-line-numbers: false

cereal[order(cereal$sodium, cereal$sugars),]
```

```{r}
#| echo: false
#| eval: true
#| label: arrange-complex-base-r-table

cereal[order(cereal$sodium, cereal$sugars),] |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```


# `select()`


## `select()`

We **select** which variables (columns) we would like to remain in the data.

. . .

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: false
#| label: select-code

cereal |> 
  select(name, manuf, calories, cups)
```

```{r}
#| echo: false
#| label: select-table
cereal |> 
  select(name, manuf, calories, cups)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `select()` a Sequence of Columns

```{r}
#| echo: true
#| eval: false
#| label: select-range-code
#| code-line-numbers: false

cereal |> 
  select(name:calories)
```

</br> 

```{r}
#| echo: false
#| eval: true
#| label: select-range-table

cereal |> 
  select(name:calories)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## Remove Columns

```{r}
#| echo: true
#| eval: false
#| label: remove-columns-code
#| code-line-numbers: false

cereal |> 
  select(-rating)
```

</br> 

```{r}
#| echo: false
#| eval: true
#| label: remove-columns-table

cereal |> 
  select(-rating)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## `select()`: Reordering

You can reorder columns inside of `select()`.

```{r}
#| echo: true
#| eval: false
#| label: reorder-code
#| code-line-numbers: false

cereal |> 
  select(name, rating, manuf, type, 
         calories, cups, weight,
         everything()
         )
```

```{r}
#| echo: false
#| label: reorder-table

cereal |> 
  select(name, rating, manuf, type, calories, cups, weight,
         everything()) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `select()`: Handy Helpers!

::: {.small}
- `everything()` : selects all columns **that you have not already specified**
- `starts_with()` : selects columns with names that **start with** the specified
string
- `ends_with()` : selects columns with names that **end with** the specified
string
- `contains()` : selects columns with names that **contain** the specified
string
:::

::: {.small}
::: {.callout-tip}
# Strings in Week 5

You'll learn more about working with strings in Week 5!
:::
:::

## How do we "select" in base `R`?

You can use bracketing (`[]`) or the `subset()` function!

::: columns
::: {.column width="47%"}
```{r}
#| echo: true
#| eval: false
#| label: select-base-r-bracket-code
#| code-line-numbers: false

cereal[ , c("name", 
            "manuf", 
            "calories", 
            "cups")]
```
:::

::: {.column width="3%"}
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false
#| label: select-base-r-subset-code
#| code-line-numbers: false

subset(cereal, 
       select = c(name, 
                  manuf, 
                  calories, 
                  cups)
       )
```
:::
:::

```{r}
#| echo: false
#| label: select-base-r-subset-table

subset(cereal, 
       select = c(name, 
                  manuf, 
                  calories, 
                  cups)
       ) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```

# `rename()`

![](images/rename_horst.png){fig-alt="Header text: 'dplyr:: rename() - rename columns'. Below, an illustration of a mouse standing on a wedge of swiss cheese, changing column names from 'species' to 'nemesis,' and 'site' to 'lair.' On a cork board next to the mouse are images of 'Cheese thieves' suspects (narwhal, chicken and pika) and maps of their locations."}

## `rename()`

- You can rename columns with `select()`, but all columns not specified will be dropped.
  * Using the `rename()` function is easier! 

```{r}
#| echo: true
#| eval: false
#| label: rename-code
#| code-line-numbers: false

cereal |> 
  rename(temp = type)
```

```{r}
#| echo: false
#| label: rename-table

cereal |> 
    rename(temp = type) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```

# `mutate()`

```{r}
#| fig-align: center
#| fig-cap: "Artwork by Allison Horst"
#| fig-alt: "A cartoon illustration of a scientist holding a glowing test tube, from which several hexagonal shapes are emerging and transforming as they float upward. The scientist, dressed in a lab coat and safety goggles, symbolizes the concept of mutation, representing the 'mutate()' function from the 'dplyr' package in R. This function is used to modify or create new variables in a dataset, depicted here as hexagonal shapes changing form."

knitr::include_graphics("https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_mutate.png")
```


## `mutate()` to include a new variable

```{r}
#| eval: false
#| echo: true
#| label: mutate-add-code
#| code-line-numbers: false

cereal |> 
  mutate(potass_per_cup = potass / cups)
```

</br> 

```{r}
#| eval: true
#| echo: false
#| label: mutate-add-table

cereal |> 
  mutate(potass_per_cup = potass / cups)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## `mutate()` to change an existing variable

```{r}
#| eval: false
#| echo: true
#| label: mutate-change-code
#| code-line-numbers: false

cereal |> 
  mutate(shelf = as.factor(shelf))
```

</br>

```{r}
#| eval: true
#| echo: false
#| label: mutate-change-table

cereal |> 
  mutate(shelf = as.factor(shelf))  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## `mutate()`: Handy Helpers!

+ `as.factor()`, `as.numeric()`, etc. : change variable type
+ `+`, `-`, `*`, `/` : basic mathematical operations
+ `%%` : modulo (returns the remainder when doing division)

On Thursday we'll talk about:

+ `if_else()`: creating a new variable with two levels
+ `case_when()`: creating a new variable with three or more levels 

## How do we "mutate" in base `R`?

You can define new columns...

```{r}
#| echo: true
#| eval: false
#| label: mutate-base-r-code
#| code-line-numbers: false

cereal$potass_per_cup <- cereal$potass / cereal$cups
```

```{r}
#| echo: false
#| eval: true
#| label: mutate-base-r-table

tmp <- cereal
tmp$potass_per_cup <- tmp$potass / tmp$cups

tmp |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

</br>

...OR overwrite old ones!

```{r}
#| echo: true
#| eval: false
#| label: mutate-base-r-overwrite
#| code-line-numbers: false

cereal$shelf <- as.factor(cereal$shelf)
```


# `group_by()`

```{r}
#| fig-align: center
#| fig-cap: "Artwork by Allison Horst"
#| fig-alt: "A cartoon illustration of a group of animals, including a horse, a cow, a sheep, and a chicken, standing closely together inside a lasso. The lasso represents grouping, and the animals appear calm and organized. Outside the lasso, there is an open space, suggesting the concept of 'ungrouping' in data manipulation, where the grouping is removed and entities are no longer confined to the same category or structure. This represents the 'ungroup()' function in R's dplyr package, symbolizing the removal of grouping from data."

knitr::include_graphics("https://raw.githubusercontent.com/allisonhorst/stats-illustrations/main/rstats-blanks/ungroup_blank.png")
```


## `group_by()`

**Separate** the data into different groups based on a **categorical** variable.

. . .

The data gets grouped, but nothing happens externally.

```{r}
#| echo: true
#| label: group-by-code
#| code-line-numbers: false

cereal |> 
  group_by(type)
```

::: {.small}
```{r}
#| eval: true
#| echo: false
#| label: group-by-table

cereal |> 
    group_by(type)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "100px")
```
:::


# `summarize()`

`group_by()` is almost always paired with `summarize()`!

## `summarize()`

We can calculate **summaries** of variables in the data.

. . .

```{r}
#| echo: true
#| eval: true
#| label: summarize-one-var
#| code-line-numbers: false

cereal |> 
  summarise(mean_fiber = mean(fiber))
```

. . .

Or **multiple** summaries at the same time.

```{r}
#| echo: true
#| label: summarize-many-vars
#| code-line-numbers: false

cereal |> 
summarize(mean_fiber = mean(fiber),
          num_cereals = n(),
          mean_sugar = mean(sugars)
          )
```


## `summarize()`: Handy Helpers!

- `mean()`, `median()`, `sd()`, `sum()`
- `min()`, `max()`
- `n()`, `n_distinct()` : counts the number of (distinct) elements
- `first()`, `last()`, `nth()` : extract the first, last, or nth element

## `group_by() + summarize()`!

1. `group_by` a variable (or multiple variables)
2. `summarize` a variable (or multiple variables) **within** the groups

```{r}
#| echo: true
#| eval: false
#| label: group-by-summarize-code
#| code-line-numbers: false

cereal |> 
  group_by(manuf) |> 
  summarise(mean_sugar = mean(sugars))
```

```{r}
#| eval: true
#| echo: false
#| label: group-by-summarize-table

cereal |> 
  group_by(manuf) |> 
  summarise(mean_sugar = mean(sugars))  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `group_by() + mutate()`!

1. `group_by` a variable (or multiple variables)
2. `mutate` a variable (or multiple variables) **within** the groups

```{r}
#| echo: true
#| eval: false
#| label: group-by-mutate-code
#| code-line-numbers: false

cereal |> 
  group_by(manuf) |> 
  mutate(mean_sugar = mean(sugars))
```

```{r}
#| eval: true
#| echo: false
#| label: group-by-mutate-table

cereal |> 
  group_by(manuf) |> 
  mutate(mean_sugar = mean(sugars))  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## The Difference?

`group_by() + summarize()` **collapses** the data.

+ You will only have **one row per group** remaining.

<br>

`group_by() + mutate()` does not.

+ You will have the **full number of rows** remaining.

## `ungroup()`

The `ungroup()` function will remove the internal grouping in your data.

+ This is not something that you always need to do, but if you are getting
unexpected output downstream from a `group_by()` statement, try ungrouping your
data!

## When would you need to `ungroup()`?

::: {.small}
The default for `summarize()` is to drop the *last* variable **after** the
subsequent operation is taken. 

Meaning, the first variables used for grouping **will not** be dropped, unless
otherwise specified. 
:::

. . .

::: {.small}
```{r}
#| code-line-numbers: false
#| label: group-by-drop-first
#| echo: true

cereal |> 
  group_by(manuf, type) |> 
  summarize(mean_calories = mean(calories))
```
:::

## How do I ungroup?

**Option 1** - Use the `.groups` argument of `summarize()`

::: {.small}
```{r}
#| eval: false
#| echo: true
#| label: drop-groups
#| code-line-numbers: false

cereal |> 
  group_by(manuf, type) |> 
  summarize(mean_calories = mean(calories), 
            .groups = "drop")
```
:::

. . .

**Option 2** - Use the `ungroup()` function after `summarize()`

::: {.small}
```{r}
#| eval: false
#| echo: true
#| label: ungroup-last
#| code-line-numbers: false

cereal |> 
  group_by(manuf, type) |> 
  summarize(mean_calories = mean(calories)) |> 
  ungroup()
```
:::

## How do we "group" and "summarize" in base `R`?

You can use the `aggregate()` function.

```{r}
#| echo: true
#| eval: false
#| label: base-r-group-summarize-code
#| code-line-numbers: false

cereal |> 
  aggregate(sugars ~ manuf, FUN = mean)
```

```{r}
#| echo: false
#| eval: true
#| label: base-r-group-summarize-table

cereal |> 
  aggregate(sugars ~ manuf, FUN = mean) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## Glue it all together!

```{r}
#| echo: true
#| eval: false
#| label: one-pipe-many-steps-code
#| code-line-numbers: false

cereal |> 
  filter(type == "cold") |> 
  mutate(potass_per_cup = potass / cups) |> 
  group_by(manuf) |> 
  summarise(mean_potass_per_cup = mean(potass_per_cup))
```

```{r}
#| eval: true
#| echo: false
#| label: one-pipe-many-steps-table

cereal |> 
  filter(type == "cold") |> 
  mutate(potass_per_cup = potass / cups) |> 
  group_by(manuf) |> 
  summarise(mean_potass_per_cup = mean(potass_per_cup)) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## Code Formatting

Similar to the `+` formatting in `ggplot`, **do not** continue a line after writing a `|>`!

::: panel-tabset

### Bad Practice

```{r}
#| echo: true
#| eval: false
#| label: bad-formatting
#| code-line-numbers: false

cereal |> group_by(type) |> summarise(mean_fiber = mean(fiber), num_cereals = n(), mean_sugar = mean(sugars))
```

### Good
```{r}
#| echo: true
#| eval: false
#| label: nice-formatting
#| code-line-numbers: false

cereal |> 
  group_by(type) |> 
  summarise(mean_fiber = mean(fiber), num_cereals = n(), mean_sugar = mean(sugars))
```

### Amazing
```{r}
#| echo: true
#| eval: false
#| label: amazing-formatting
#| code-line-numbers: false

cereal |> 
  group_by(type) |> 
  summarise(mean_fiber = mean(fiber), 
            num_cereals = n(),
            mean_sugar = mean(sugars)
            )
```
:::

# [PA 3: Identify the Mystery College](../../group-activities/week-3/PA3-dplyr.qmd)

Today you will use the `dplyr` package to clean some data and then use that cleaned data to figure out what college Ephelia has been accepted to.

![](images/WSU-ivy-covered-building.jpg){fig-alt="A picture of a college building covered in green ivy. The building is reminescent of gothic architecture, with a brick exterior and many windows."}

## Finding Ephelia's College

::: columns
::: {.column width="40%"}
::: {.small}
This activity will require knowledge of:

- debugging code errors
- function syntax
- logical comparisons
- dplyr verbs and when to use them
- chaining steps together with the pipe operator
:::

:::

::: {.column width="5%"}
:::

::: {.column width="55%"}

![](images/debugging_horst.png){fig-alt="This image is a comic illustration titled 'debugging' featuring a series of 10 round green characters with various facial expressions and captions describing the stages of debugging code. The first character is smiling confidently with the caption 'I got this.' The second character has a neutral, confused expression with the caption 'Huh. Really thought that was it.' The third character looks puzzled and silent, captioned '(...).' The fourth character looks annoyed, with the caption 'Fine. Restarting.' The fifth character is angry and blushing, captioned 'OH WTF.' The sixth character is having a meltdown, looking wild-eyed and frazzled with the caption 'Zombie meltdown.' The seventh character looks exhausted and sleepy, drooling a bit, captioned with '...' The eighth character has a lightbulb above its head and a hopeful expression, captioned 'A NEW HOPE!' The ninth character looks determined, typing on a keyboard with a caption of '[insert awesome theme song].' Finally, the tenth character is joyful and celebrating with confetti, captioned 'I love CODING' The illustration humorously captures the emotional rollercoaster of debugging code."}

:::
:::

. . .

[**None of us have all these abilities. Each of us has some of these abilities.**]{.midi}

## dplyr Resources

Every group should have a **dplyr** cheatsheet! 

::: columns
::: {.column width="37%"}
::: {.fragment}
**On the Front**

::: {.incremental}
::: {.small}
- Column 1: grouped summaries (`group_by()` + `summarize()`)
- Column 2: `filter()`ing values with logical comparisons
- Column 3: `select()`ing and `mutate()`ing variables
:::
:::
:::
:::

::: {.column width="3%"}
:::

::: {.column width="37%"}
::: {.fragment}
**On the Back**

::: {.incremental}
::: {.small}
- Column 2: summary functions you might like to use with `summarize()`
:::
:::
:::
:::

::: {.column width="3%"}
:::

::: {.column width="15%"}
![](images/dplyr-cheatsheet-front.png){fig-alt="A picture of the dplyr cheatsheet, which contains helpful information on working with data in a variety of ways."}

:::
:::

<!-- ## Task Card -->

<!-- Every group should have a **task card**!  -->

<!-- . . . -->

<!-- ::: columns -->
<!-- ::: {.column width="45%"} -->
<!-- **On the Front** -->

<!-- - the expectations of each role -->
<!-- - the norms of collaborating -->
<!-- ::: -->

<!-- ::: {.column width="5%"} -->
<!-- ::: -->

<!-- ::: {.column width="45%"} -->
<!-- ::: {.fragment} -->
<!-- **On the Back** -->

<!-- - advice for dealing with code errors  -->
<!-- - guidelines for formatting `dplyr` code -->
<!-- ::: -->
<!-- ::: -->
<!-- ::: -->

## Pair Programming Expectations

::: {.small}
During your collaboration, you and your partner will alternate between two roles: 
:::

. . .

::: columns
::: {.column width="49%"}
**Developer**

::: {.small}
-   Reads prompt and ensures Coder understands what is being asked. 
-   Types the code specified by the Coder into the Quarto document.
<!-- -   Listens carefully, asks the Coder to repeat statements if needed, or to slow -->
<!-- down. -->
<!-- -   Encourages the Coder to vocalize their thinking. -->
<!-- -   Asks the Coder clarifying questions. -->
<!-- -   Checks for accuracy by asking the solution to be restated for clarity. -->
<!-- -   **Does not** give hints to the Coder for how to solve the problem.  -->
<!-- -   **Does not** solve the problem themselves.  -->
-   Runs the code provided by the Coder. 
-   Works with Coder to debug the code. 
<!-- -   **Does not** tell the Coder how to correct an error. -->
-   Evaluates the output.  
-   Works with Coder to write code comments. 
:::
:::

::: {.column width="2%"}
:::

::: {.column width="49%"}
::: {.fragment}
**Coder**

::: {.small}
-   Reads out instructions or prompts
-   Directs the Developer what to type. 
-   Talks with Developer about their ideas. 
<!-- -   **Does not** ask the Developer how they would solve the problem.  -->
-   Manages resources (e.g., cheatsheets, textbook, slides). 
<!-- -   **Does not** ask the developer what functions / tools they should use.  -->
-   Works with Developer to debug the code. 
<!-- -   **Does not** ask the Developer to debug the code.  -->
-   Works with Developer to write code comments. 
:::
:::
:::
:::

<!-- ## How does this look in Posit Cloud? -->

<!-- ::: {.small} -->
<!-- First, both of you will do the following: -->

<!-- - Join your Practice Activity workspace in Posit Cloud -->
<!--   * If you were sent a new email, you were added to a different group! -->
<!-- - Log-in to Posit Cloud -->
<!-- - Open the PA 3: Identify the Mystery College project -->
<!-- - Open the `PA3-dplyr.qmd` file -->
<!-- ::: -->

<!-- . . . -->

<!-- ::: {.small} -->
<!-- Then, the partner whose birthday is closest to January 1st starts as the  -->
<!-- Developer (typing and listening to instructions from the Coder)! -->

<!-- - The Coder **does not type**.  -->
<!--   * The collaborative editing feature should allow you to track what is being  -->
<!--   typed.  -->
<!-- - The Developer **only types what they are told to type**.  -->
<!-- ::: -->

## Why are we switching?

Throughout the activity you will swap roles---the Developer will become the 
Coder, and the Coder will become the Developer. 

. . .

</br> 

We are alternating roles so everyone:

- has the chance to apply their coding skills
- practices talking through their code
- has the opportunity to explain their thinking

## External Resources

During the Practice Activity, you **are not** permitted to use Google or ChatGPT
for help. 

. . .

</br> 

You **are** permitted to use:

- the `dplyr` cheatsheet,
- the course textbook, and
- the course slides. 

## Submission

> Submit the full name of the college Ephelia will attend to the Canvas Quiz.

- Each person will input the full name of the college in the PA3 Canvas quiz.
- Each person will submit the `PA-3.html` file.

