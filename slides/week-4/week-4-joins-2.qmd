---
title: "Extending Joins, Factors, Clean Variable Names"
format: 
  revealjs:
        theme: [simple, ../style.scss]
editor: source
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(palmerpenguins)
library(ggridges)
library(readxl)
```

```{r}
#| eval: true
#| label: imdb-data
#| include: false
#| message: false
#| warning: false

actors <- read_csv("data/actors.csv")
directors <- read_csv("data/directors.csv")
directors_genres <- read_csv("data/directors_genres.csv")
movies <- read_csv("data/movies.csv")
movies_directors <- read_csv("data/movies_directors.csv")
movies_genres <- read_csv("data/movies_genres.csv")
roles <- read_csv("data/roles.csv")
```

## Thursday, January 30

Today we will...

::: columns
::: {.column width="55%"}
::: {.small}
- Debrief PA 4
  + Describe the Code
  + Clean Column Names  
- Debrief Lab 3 & Challenge 3
  + Common Themes
  + Package Lifecycle Stages
  + Expectations for Tools Used
  <!-- + Reminder about Lab 3 Peer Review -->
:::
:::

::: {.column width="5%"}
:::

::: {.column width="40%"}
::: {.small}
-   New Material
    -   Extensions to Relational Data
    -   Factors with `forcats`
-   [Lab 4: Childcare Costs in California](../../labs/instructions/lab-4-instructions.qmd)
:::
:::
:::



# Practice Activity 4

![](images/frustrated-about-r.png){fig-alt="A frustrated little monster sits on the ground with his hat next to him, saying 'I just need a minute.' Looking on empathetically is the R logo, with the word 'Error' in many different styles behind it."}

## Take 3-minutes to...

```{r}
#| include: false
library(readxl)
library(tidyverse)
military <- read_xlsx(here::here("group-activities", 
                                 "week-4", 
                                 "data",
                                 "gov_spending_per_capita.xlsx"),
                sheet = "Share of Govt. spending", 
                skip  = 7, 
                n_max  = 191)

military_clean <- military |> 
  mutate(across(`1988`:`2019`,
                ~ na_if(.x, y = ". .")),
         across(`1988`:`2019`,
                ~ na_if(.x, y = "xxx")))
```

Write down *in plain language* what each line of this code is doing. 

</br> 

```{r}
#| eval: false
#| echo: true
#| label: if-all-code-from-PA
#| code-line-numbers: false

military_clean %>% 
  filter(
    if_all(.cols = -Country, 
           .fns = ~ is.na(.x)
           ), 
    !is.na(Country)
    ) %>% 
  pull(Country)
```

# `janitor` Package

![Image by Allison Horst](images/janitor_clean_names.png){fig-alt="janitor::clean_names(): convert all column names to *_case! Below, a cartoon beaver putting shapes with long, messy column names (pulled from a bin labeled 'MESS' and 'not so awesome column names') into a contraption that converts them to lower snake case. The output has stylized text reading 'Way more deal-withable column names.' Learn more about clean_names and other *awesome* data cleaning tools in janitor."}

## Clean Variable Names with [`janitor`](https://sfirke.github.io/janitor/)

::: {.small}
Data from external sources likely has variable names not ideally formatted for R.

Names may...

+ contain spaces.
+ start with numbers.
+ start with a mix of capital and lower case letters.
:::

. . .

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: false

names(military_clean)[1:12]
```

## Clean Variable Names with [`janitor`](https://sfirke.github.io/janitor/)

::: {.small}
The `janitor` package converts all variable names in a dataset to *snake_case*.

Names will...

+ start with a lower case letter.
+ have spaces filled in with `_`.

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: "3-5"

library(janitor)

military_clean_names <- military |> 
  clean_names()

names(military_clean_names)[1:12]
```
:::


## Lab 3 Common Themes

::: {.small}
::: {.incremental}
+ **Q1:** The [`tidyverse`](https://www.tidyverse.org/packages/) package automatically loads `ggplot2`, `dplyr`, `readr`, etc. -- do not load these twice!

- **Q3:** Where did these data come from? How were they collected? What is the
context of these data?
  + **Challenge 3:** When reaching a conclusion with the hypothesis test, what
  does Question 3 refer to?
- Saving an f*$# load of objects 
  + Not outputting the results
:::
:::

## Lab 3 Common Themes

::: {.small}
- **Q5 & Q7**: Not using the "correct" function syntax

```{r}
#| eval: false
#| echo: true
#| label: correct-syntax-across
#| code-line-numbers: false

if_any(.cols = everything(), .fns = ~ is.na(.x))
```
:::

::: {.small}
::: {.incremental}
- Not using `.x` to specify where the `.cols` input should go will go awry 
  when there are **multiple** function inputs. 
- Using named arguments (e.g., `.cols = `, `.fns = `) makes your code more
readable and is part of the code formatting guidelines for this class. 

</br>

- Think about "efficient" ways to do things
  + **Q5**: Are you using the same function `across()` multiple columns?
  + **Q6**: Can you calculate multiple summary statistics in one pipeline?
  + **Q10-12**: Is there a way you can get **both** the max *and* min in one
  pipeline?
:::
:::

# Lifecycle Stages

## Lifceycle Stages

As packages get updated, the functions and function arguments included in those packages will change.

+ The accepted syntax for a function may change.
+ A function/functionality may disappear.

![[Learn more about lifecycle stages](https://lifecycle.r-lib.org/articles/stages.html) of packages, functions, function arguments in R.](images/lifecycle.png){fig-alt="The image shows a flow diagram representing the lifecycle stages of a feature or process. It consists of four colored boxes with arrows connecting them. The green box in the center labeled stable is the main stage. To the left, an orange box labeled experimental has an arrow pointing toward stable, indicating that experimental features can progress to become stable. From stable, one arrow points upward to another orange box labeled deprecated, indicating that stable features can become deprecated. Another arrow points right to a dark blue box labeled superseded, showing that stable features can also be replaced or superseded."}


## Lifceycle Stages

<center>

![](images/summarize_lifecycle.png){width=70% fig-alt="The image shows the documentation for the summarise() (or summarize(), using the American spelling) function in R, commonly used in the dplyr package for data manipulation. The summarise() function is used to create summary statistics for data frames or tibbles. The key arguments include .data, which is the data frame or tibble input, and ..., which represents name-value pairs of summary functions. The .by and .groups arguments are optional and used to control grouping behavior in the summarization. A key point in the documentation is that returning values with size 0 or greater than 1 in summary functions, such as min(), n(), or sum(), was deprecated as of version 1.1.0. Instead, users are encouraged to use the reframe() function, which replaces the deprecated behavior. The lifecycle badge marks the deprecation of this feature, ensuring that users know that previous versions' behavior should be updated for compatibility with future versions of the package."}

</center>

## Deprecated Functions

::: {.small}
A **deprecated** functionality has a better alternative available and is scheduled for removal.

+ You get a warning telling you what to use instead.
:::
. . .

::: {.small}
```{r}
#| warning: true
#| message: true
#| echo: true
#| code-line-numbers: "2"

military_clean |> 
  filter(across(.cols = Notes:`2019`, 
                .fns = ~ is.na(.x)
                )
         ) 
```
:::

## Deprecated Functions

::: {.small}
You **should not** use deprecated functions!

Instead, we use...

```{r}
#| echo: true
#| code-line-numbers: "2"
military_clean |>
  filter(if_all(.cols = Notes:`2019`, 
                .fns = ~ is.na(.x)
                )
         ) 
```
:::

## Superceded Functions

A **superseded** functionality has a better alternative, but is not going away.

+ This is a softer alternative to deprecation.
+ A superseded function will not give a warning (since thereâ€™s no risk if you
keep using it), but the documentation will give you a recommendation for what
to use instead.

## What is my job?

</br> 

::: columns
::: {.column width="40%"}
::: {.fragment}
**Teaching you stuff**

</br> 

(Thoughtfully) choosing what to teach and how to teach it.
::: 
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
::: {.fragment}
**Assessing what you've learned**

</br> 

What do you understand about the tools I've taught you? 

::: {.fragment}
This **is not** the same as assessing if you figured out a way to 
accomplish a given task.
::: 
:::
:::
:::

<!-- # Don't Forget to Complete Your Lab 3 Code Review -->

<!-- > Make sure your feedback follows the [code review guidelines](../../code-review/code-review-guidelines.qmd).  -->

<!-- > Insert your review into the comment box!  -->

# Extensions to Relational Data

## Relational Data

When we work with multiple tables of data, we say we are working with
**relational data**.

+ It is the *relations*, not just the individual datasets, that are important.

. . .

When we work with relational data, we rely on **keys**.

-   A key uniquely identifies an observation in a dataset.
-   A key allows us to relate datasets to each other


## IMDb Movies Data

![](images/imdb-keys.png){fig-alt="A diagram depicting the relationships between various tables in a movie database. The tables and their columns are as follows. directors_genres: Contains 'director_id' (int), 'genre' (varchar), and 'prob' (float). Linked to the 'directors' table by 'director_id.' movies_directors: Contains 'director_id' (int) and 'movie_id' (int). Linked to both the 'directors' and 'movies' tables by 'director_id' and 'movie_id.' movies_genres: Contains 'movie_id' (int) and 'genre' (varchar). Linked to the 'movies' table by 'movie_id.' roles: Contains 'actor_id' (int), 'movie_id' (int), and 'role' (varchar). Linked to both the 'actors' and 'movies' tables by 'actor_id' and 'movie_id.' The following entity tables are represented at the bottom: directors: Contains 'id' (int), 'first_name' (varchar), and 'last_name' (varchar). movies: Contains 'id' (int), 'name' (varchar), 'year' (int), and 'rank' (float). actors: Contains 'id' (int), 'first_name' (varchar), 'last_name' (varchar), and 'gender' (char). Arrows represent relationships between the various tables, with foreign keys connecting them."}

**How can we find each director's active years?**

## Joining Multiple Data Sets

::: panel-tabset
### Data

:::: {.columns}
::: {.column width="50%"}
::: {.small}
```{r}
#| echo: true
directors[1:4,]
```
:::
:::

::: {.column width="50%"}
::: {.small}
```{r}
#| echo: true
movies_directors[1:4,]
```
:::
::: 
::::

:::: {.columns}
::: {.column width="25%"}
:::

::: {.column width="50%"}
::: {.small}
```{r}
#| echo: true
movies[1:4,]
```
:::
:::
::::

### Sketch

```{r}
#| out-width: "90%"
#| fig-align: center
#| fig-alt: "The image illustrates a relational database schema involving three tables: movies_directors, directors, and movies. The movies_directors table has two columns: director_id (int) and movie_id (int). The directors table contains id (int), first_name (char), and last_name (char), while the movies table includes id (int), name (char), year (int), and rank (float). A caution is noted, highlighting that there are two columns named id, but they store different types of information. The goal is to keep only observations that appear in all three datasets, which requires using two calls to the inner_join() function. There's also a suggestion to rename the column name in the final dataset, which would contain columns like director_id, movie_id, first_name, last_name, name, year, and rank."

knitr::include_graphics("images/multiple_joins.png")
```

### 1st + 2nd

::: {.small}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

movies_directors |> 
  inner_join(directors, 
             by = join_by(director_id == id)
             )
```
:::

```{r}
#| eval: true
#| echo: false
movies_directors |> 
  inner_join(directors, 
             join_by(director_id == id)) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 25)
```

### + 3rd

::: {.small}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
movies_directors |> 
  inner_join(directors, 
             by = join_by(director_id == id)
             ) |> 
  inner_join(movies,
             by = join_by(movie_id == id)
             ) |> 
  rename(movie_name = name)
```
:::

```{r}
#| eval: true
#| echo: false
movies_directors |> 
  inner_join(directors, 
             join_by(director_id == id)) |> 
  inner_join(movies,
             join_by(movie_id == id)) |> 
  rename(movie_name = name) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 25)
```

:::


## Joining on Multiple Variables

Consider the `rodent` data from Lab 2.

+ We want to add `species_id` to the rodent measurements.

```{r}
rodent <- read_csv(here::here("labs", 
                              "student", 
                              "data", 
                              "surveys.csv")
                   )

species <- rodent |> 
  select(genus:taxa, species_id) |> 
  distinct()

measurements <- rodent |> 
  select(genus, species, sex:weight) |> 
  rename(genus_name = genus)
```

::: panel-tabset

## Species

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

species
```

```{r}
#| eval: true
#| echo: false
species |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 25)
```

## Measurements

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

measurements
```

```{r}
#| eval: true
#| echo: false
measurements[1:100,] |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 25)
```
:::

## Join by `species` + `genus`

::: {.small}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

measurements |> 
  left_join(species,
            by = join_by(species == species, 
                         genus_name == genus)
            )
```
:::

```{r}
#| eval: true
#| echo: false
measurements[1:100, ] |> 
  left_join(species,
            by = join_by(species == species, 
                         genus_name == genus)
            ) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 25)
```

. . .

</br> 

::: {.small}
**What if a species was included in the `species` dataset, but not in the
`measurement` dataset?**
:::

# Factor Variables


## What is a factor variable?

</br> 

In general, factors are used for: 

1. categorical variables with a fixed and known set of possible values.
  + E.g., `day_born` = Sunday, Monday, Tuesday, ..., Saturday
2. displaying character vectors in non-alphabetical order.


## Eras Tour

Let's consider songs that Taylor Swift played on her Eras Tour. I have randomly
selected 25 songs (and their albums) to consider.

```{r}
#| echo: false

set.seed(2)

full_eras <- read_xlsx("data/TS_data.xlsx", sheet = 1)

eras_data <- full_eras |> 
  slice_sample(n = 25) |> 
  select(Song, Album)
```

```{r}
#| echo: true
#| code-line-numbers: false

eras_data 
```


## Creating a Factor -- Base `R`

::: panel-tabset

## A **character** vector:

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

eras_data |> 
  pull(Album)
```
:::

## A **factor** vector:

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

eras_data |> 
  pull(Album) |> 
  as.factor()
```
:::
:::

## Creating a Factor -- Base `R`

When you create a factor variable from a vector...

+ Every unique element in the vector becomes a **level**.
+ The levels are ordered alphabetically.
+ The elements are no longer displayed in quotes.


## Creating a Factor -- Base `R`

You can **specify the order of the levels** with the `levels` argument.

```{r}
#| echo: true
#| code-line-numbers: false
#| eval: false

eras_data |> 
  pull(Album) |> 
  factor(levels = c("Fearless",
                    "Speak Now",
                    "Red",
                    "1989",
                    "Reputation",
                    "Lover",
                    "Folklore",
                    "Evermore",
                    "Midnights")
         )
```

## `forcats`

:::: {.columns}
::: {.column width="80%"}
::: {.small}
We use this package to...

+ turn character variables into factors.

+ make factors by discretizing numeric variables.

+ rename or reorder the levels of an existing factor.
:::
:::

::: {.column width="20%"}
```{r}
#| fig-align: center
#| fig-alt: "The image shows a hexagonal logo with a brown border featuring a group of black cats resting inside a cardboard box. The cats appear relaxed, laying on top of one another, with their eyes closed or half-open. The word forcats is written on the side of the box in a light brown color. This image represents the logo of the R package forcats, which is typically used for handling categorical variables (factors) in data analysis within the R programming environment."

knitr::include_graphics("https://github.com/rstudio/hex-stickers/blob/main/thumbs/forcats.png?raw=true")
```
:::
::::

::: {.small}
::: callout-note
# `forcats` loads with `tidyverse`!
The packages `forcats` ("for categoricals") helps wrangle categorical variables.
:::
:::


## Creating a Factor -- `fct`

With `fct()`, the levels are automatically ordered in the **order of first appearance**.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

eras_data |> 
  pull(Album) |> 
  fct()
```
:::

## Creating a Factor 

::: {.small}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false
eras_data <- eras_data |> 
  mutate(Album = fct(Album))
```
:::

::: {.small}
::: {.callout-warning}
# To change a column type to factor, you must wrap `fct()` in a `mutate()` call.
:::
:::

. . .

</br> 

::: {.small}
I am using `pull()` to display the outcome:

```{r}
#| echo: true
#| code-line-numbers: false
eras_data |> 
  pull(Album) |> 
  fct()
```
:::

## Creating a Factor -- `fct`

You can still **specify the order of the levels** with `level`.

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false
#| eval: false

eras_data |> 
  pull(Album) |> 
  fct(levels = c("Fearless",
                 "Speak Now",
                 "Red",
                 "1989",
                 "Reputation",
                 "Lover",
                 "Folklore",
                 "Evermore",
                 "Midnights")
      )
```
:::

## Creating a Factor -- `fct`

You can also **specify non-present levels**.

```{r}
#| echo: true
#| code-line-numbers: "3,13"
#| eval: false

eras_data |> 
  pull(Album) |> 
  fct(levels = c("Taylor Swift",
                 "Fearless",
                 "Speak Now",
                 "Red",
                 "1989",
                 "Reputation",
                 "Lover",
                 "Folklore",
                 "Evermore",
                 "Midnights",
                 "The Tortured Poets Department")
      ) 
```

```{r}
#| echo: false
eras_data <- eras_data |> 
  mutate(Album = fct(Album,
                     levels = c("Taylor Swift",
                                "Fearless","Speak Now","Red",
                                "1989","Reputation","Lover",
                                "Folklore","Evermore","Midnights",
                                "The Tortured Poets Department")))
```


## Re-coding a Factor -- `fct_recode`

::: {.small}
Oops, we have a typo in some of our levels! We change existing levels with the
syntax: `"<new level>" = "<old level>"`.
:::

. . .

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

eras_data |>
  mutate(Album = fct_recode(.f = Album,
                            "folklore" = "Folklore",
                            "evermore" = "Evermore",
                            "reputation" = "Reputation")
         )
```
:::

## Re-coding a Factor -- `case_when`

::: {.small}
We have similar functionality with the `case_when()` function...
:::

. . .

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

eras_data |>
  mutate(Album = case_when(Album == "Folklore" ~ "folklore",
                           Album == "Evermore" ~ "evermore",
                           Album == "Reputation" ~ "reputation",
                           .default = Album),
         Album = fct(Album)) |> 
  pull(Album)
```
:::

## Collapsing a Factor --`fct_collapse`

::: {.small}
Collapse multiple existing levels of a factor with the syntax:

`"<new level>" = c("<old level>", "<old level>", ...)`.
:::

. . .

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false

eras_data |> 
  mutate(Genre = fct_collapse(.f = Album,
                       "country pop" = c("Taylor Swift", "Fearless"),
                       "pop rock" = c("Speak Now", "Red"),
                       "electropop" = c("1989", "Reputation", "Lover"),
                       "folk pop" = c("Folklore", "Evermore"),
                       "alt-pop" = "Midnights")
         ) |> 
  slice_sample(n = 6)
```
:::

## Re-leveling a Factor --`fct_relevel`

Change the **order** of the levels of an existing factor.

::: panel-tabset

### Original

```{r}
#| echo: true
#| code-line-numbers: false

eras_data |>
  pull(Album) |> 
  levels()
```

### Ordered by Copies Sold

::: {.small}
```{r}
#| echo: true
#| code-line-numbers: false
#| eval: false

eras_data |> 
  pull(Album) |>
  fct_relevel(c("Fearless",
                "1989",
                "Taylor Swift",
                "Speak Now",
                "Red",
                "Midnights",
                "Reputation",
                "Folklore",
                "Lover",
                "Evermore")
              ) |> 
  levels()
```
:::
:::


## Re-ordering Factors in `ggplot2`

::: panel-tabset

### Original

The bars follow the default factor levels.

::: {.small}
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2"

full_eras |> 
  mutate(Album = fct(Album)) |> 
  ggplot(mapping = aes(y = Album,
               fill = Album)
         ) +
  geom_bar() +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = "",
       y = "",
       title = "Number of Songs Played on the Eras Tour by Album")
```
:::

### Plot

```{r}
#| echo: false
#| 
full_eras |> 
  mutate(Album = fct(Album)) |> 
  ggplot(mapping = aes(y = Album,
               fill = Album)
         ) +
  geom_bar() +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = "",
       y = "",
       title = "Number of Songs Played on the Eras Tour by Album")
```

### Specify Levels

::: {.small}
We can order factor levels to order the bar plot.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "2-13"

full_eras |> 
  mutate(Album = fct(Album,
                     levels = c("Fearless",
                                "Speak Now",
                                "Red",
                                "1989",
                                "Reputation",
                                "Lover",
                                "Folklore",
                                "Evermore",
                                "Midnights")
                     )
         ) |> 
  ggplot(mapping = aes(y = Album,
               fill = Album)
         ) +
  geom_bar() +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = "",
       y = "",
       title = "Number of Songs Played on the Eras Tour by Album")
```
:::

### Plot

```{r}
#| echo: false

full_eras |> 
  mutate(Album = fct(Album,
                     levels = c("Fearless",
                                "Speak Now",
                                "Red",
                                "1989",
                                "Reputation",
                                "Lover",
                                "Folklore",
                                "Evermore",
                                "Midnights")
                     )
         ) |> 
  ggplot(mapping = aes(y = Album,
               fill = Album)
         ) +
  geom_bar() +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = "",
       y = "",
       title = "Number of Songs Played on the Eras Tour by Album")
```
:::


## Re-ordering Factors in `ggplot2`

::: {.small}
```{r}

full_eras <- full_eras |> 
  mutate(Album = fct(Album,
                     levels = c("Fearless",
                                "Speak Now",
                                "Red",
                                "1989",
                                "Reputation",
                                "Lover",
                                "Folklore",
                                "Evermore",
                                "Midnights")
                     )
         )
```
:::

::: panel-tabset

### Original

::: {.small}
The ridge plots follow the order of the factor levels.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3"

full_eras |> 
  ggplot(mapping = aes(x = Length, 
                       y = Album, 
                       fill = Album)
         ) +
  geom_density_ridges() +
  theme_minimal() +
  theme(legend.position = "none")+
  labs(x = "Song Length (mins)",
       y = "",
       title = "Length of Songs Played on the Eras Tour by Album")
```
::: 

### Plot

```{r}
#| echo: false

full_eras |> 
  ggplot(mapping = aes(x = Length, 
                       y = Album, 
                       fill = Album)
         ) +
  geom_density_ridges() +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = "Song Length (mins)",
       y = "",
       title = "Length of Songs Played on the Eras Tour by Album")
```

### `fct_reorder()`

::: {.small}
Inside `ggplot()`, we can order factor levels by a summary value.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "3-5"
full_eras |> 
  ggplot(aes(x = Length, 
             y = fct_reorder(.f = Album,
                             .x = Length,
                             .fun = mean), 
             fill = Album)
         ) +
  geom_density_ridges() +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = "Song Length (mins)",
       y = "",
       title = "Length of Songs Played on the Eras Tour by Album")
```
::: 

### Plot

```{r}
#| echo: false
full_eras |> 
  ggplot(mapping = aes(x = Length, 
             y = fct_reorder(.f = Album,
                             .x = Length,
                             .fun = mean), 
             fill = Album)
         ) +
  geom_density_ridges() +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(x = "Song Length (mins)",
       y = "",
       title = "Length of Songs Played on the Eras Tour by Album")
```

:::


## Re-ordering Factors in `ggplot2`

::: panel-tabset

### Original

```{r}
full_eras <- full_eras |> 
  mutate(Single = if_else(Single == "Y", 1, 0))
```

::: {.small}
The legend follows the order of the factor levels.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "7"

full_eras |> 
  filter(!Album %in% c("1989","Fearless")) |> 
  group_by(Album, Single) |> 
  summarise(avg_len = mean(Length)) |> 
  ggplot(mapping = aes(x = Single, 
                       y = avg_len, 
                       color = Album)) +
  geom_point(size = 1.5) +
  geom_line() +
  theme_minimal() +
  scale_x_continuous(breaks = c(0,1),
                     labels = c("No", "Yes")
                     ) +
  labs(y = "",
       title = "Are Taylor Swift's Singles Shorter?",
       color = "Album")
```
:::

### Plot

```{r}
#| echo: false

full_eras |> 
  filter(!Album %in% c("1989","Fearless")) |> 
  group_by(Album, Single) |> 
  summarise(avg_len = mean(Length)) |> 
  ggplot(mapping = aes(x = Single, 
                       y = avg_len, 
                       color = Album)) +
  geom_point(size = 1.5) +
  geom_line() +
  theme_minimal() +
  scale_x_continuous(breaks = c(0,1),
                     labels = c("No", "Yes")
                     ) +
  labs(y = "",
       title = "Are Taylor Swift's Singles Shorter?",
       color = "Album")
```

### `fct_reorder2()`

::: {.small}
Inside `ggplot()`, we can order factor levels by the $y$ values associated with the largest $x$ values.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: 7-9

full_eras |> 
  filter(!Album %in% c("1989","Fearless")) |> 
  group_by(Album, Single) |> 
  summarise(avg_len = mean(Length)) |> 
  ggplot(mapping = aes(x = Single, 
                       y = avg_len, 
                       color = fct_reorder2(.f = Album,
                                            .x = Single,
                                            .y = avg_len)
                       )
         ) +
  geom_point(size = 1.5) +
  geom_line() +
  theme_minimal() +
  scale_x_continuous(breaks = c(0,1),
                     labels = c("No", "Yes")
                     ) +
  labs(y = "",
       title = "Are Taylor Swift's Singles Shorter?",
       color = "Album")
```
:::

### Plot

```{r}
#| echo: false
full_eras |> 
  filter(!Album %in% c("1989","Fearless")) |> 
  group_by(Album, Single) |> 
  summarise(avg_len = mean(Length)) |> 
  ggplot(aes(x = Single, 
             y = avg_len, 
             color = fct_reorder2(.f = Album,
                                  .x = Single,
                                  .y = avg_len))) +
  geom_point(size = 1.5) +
  geom_line() +
  theme_minimal() +
  scale_x_continuous(breaks = c(0,1),
                     labels = c("No","Yes")) +
  labs(y = "",
       subtitle = "Average Song Length",
       color = "Album")
```

::: 

# [Lab 4: Childcare Costs in California](../../labs/instructions/lab-4-instructions.qmd)

::: columns
::: {.column width="40%"}

:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
![](images/childcare-cost-map.png){fig-alt="The image is a color-coded map of the United States, showing the cost of childcare across different states. The map uses a gradient scale from light green (representing lower costs around $5,000) to dark blue (representing higher costs around $21,000). States with the most expensive childcare, such as Massachusetts ($21,019) and Washington, D.C. ($20,913), are shaded in dark blue, indicating the highest costs. States with lower costs, such as Mississippi ($5,436) and Alabama ($6,001), are shaded in light green. The map's data comes from the Economic Policy Institute, with the source indicated as Money Scoop, and was created using Datawrapper."}
:::
:::

## ChatGPT to the Rescue! 

::: columns
::: {.column width="40%"}
> [collapse the CA regions into the 10 Census regions](https://chatgpt.com/c/67103b47-d8ec-8012-bb72-5cb0467ebe18)
:::

::: {.column width="5%"}
:::

::: {.column width="55%"}
![](images/ca-counties.png){fig-alt="The image displays a map of California divided into regions based on the 2020 Census, along with a table listing the counties in each region. The map on the left uses different colors to highlight each of the 10 regions, with areas such as the San Francisco Bay Area and South Coast labeled. A legend at the bottom of the map assigns numbers and colors to each region: Superior California, North Coast, San Francisco Bay Area, Northern San Joaquin Valley, Central Coast, Southern San Joaquin Valley, Inland Empire, Los Angeles County, Orange County, and San Diego/Imperial. On the right side, a table lists the regions by number and their respective counties. For example, Region 1 includes counties like Butte, Colusa, and El Dorado, while Region 8 consists solely of Los Angeles County. Other regions contain a mix of multiple counties, such as Region 3, which includes Alameda, Contra Costa, and San Francisco."}
:::
:::

## To do...

-   **Lab 4: Childcare Costs in California**
    -   Due Sunday (2/2) at 11:59pm
-   **Read Chapter 5: Strings + Dates**
    -   **Check-in 5.1** due Tuesday (2/4) at 12pm
    -   **Check-in 5.2** due Thursday (2/6) at 12pm

